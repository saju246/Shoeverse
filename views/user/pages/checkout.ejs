<!-- Checkout Area Start -->
<div class="container mt-5">
  <form action="/placeOrder" method="post">
      <div class="row">
          <div class="col-lg-6">
              <div class="card">
                  <div class="card-body">
                      <h3 class="card-title">Select Address</h3>
                      <a href="/addAddress" class="btn btn-outline-danger mb-3">Add</a>
                      <div class="row">
                          <% if (address && address.length) { %> <% address.forEach((item, index) => { %>
                          <div class="col-md-6 mb-3">
                              <div class="card">
                                  <div class="card-body">
                                      <div class="form-check">
                                          <input class="form-check-input" type="radio" name="addressId"
                                              id="address<%= index %>" value="<%= item._id %>"
                                              required <%= index === 0 ? "checked" : "" %> />
                                          <label class="form-check-label" for="address<%= index %>">
                                              <h5 class="card-title"><%= item.name %></h5>
                                              <p class="card-text">
                                                  <%= item.address %>, <%= item.town %>, <%=
                                          item.state %>, <%= item.postcode %>
                                              </p>
                                              <p class="card-text">Mobile: +91 <%= item.phone %></p>
                                          </label>
                                      </div>
                                  </div>
                              </div>
                          </div>
                          <% }) %> <% } else { %>
                          <div class="col-md-12 text-center">
                              <p class="text-danger">No Address Found</p>
                              <a class="btn btn-dark" href="/addAddress">Add Address</a>
                          </div>
                          <% } %>
                      </div>
                  </div>
              </div>
          </div>

          <div class="col-lg-6">
              <div class="card">
                  <div class="card-body">
                      <h3 class="card-title">Your Order</h3>
                      <input type="hidden" id="originalCartData" name="currentCartData"
                          value="<%= JSON.stringify(cartData) %>" />
                      <div class="table-responsive">
                          <table class="table">
                              <thead>
                                  <tr>
                                      <th scope="col">Product</th>
                                      <th scope="col">Total</th>
                                  </tr>
                              </thead>
                              <tbody>
                                  <% product.forEach(item => { %>
                                  <tr>
                                      <td>
                                          <% if (item.product.title.length > 36) { %>
                                          <small><%= item.product.title.substring(0, 36) + '...' %></small>
                                          <% } else { %> <small><%= item.product.title %></small> <% } %>
                                          <strong class="product-quantity"> × <%= item.quantity %></strong>
                                      </td>
                                      <td>₹ <%= item.product.salePrice * item.quantity %></td>
                                  </tr>
                                  <% }) %>
                              </tbody>
                              <tfoot>
                                  <tr>
                                      <td>Cart Subtotal</td>
                                      <td>₹ <%= subtotal %></td>
                                  </tr>
                                  <tr class="wallet-payment">
                                      <td colspan="2">
                                          <div class="form-check">
                                              <input class="form-check-input" type="checkbox" id="wallet"
                                                  name="wallet" value="wallet"
                                                  style="width: 20px; height: 20px; margin-right: 10px"
                                                  <%= wallet.balance === 0 ? "disabled" : "" %> />
                                              <label class="form-check-label" for="wallet">Pay with Wallet:</label>
                                              <small>Available Balance: ₹
                                                  <span id="available-balance"><%= wallet?.balance ?? "0" %></span></small>
                                          </div>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td>Order Total</td>
                                      <td>₹<span id="total"><%= total.toFixed(2) %></span></td>
                                  </tr>
                              </tfoot>
                          </table>
                      </div>
                      <div class="form-group">
                          <label for="payment-method-select">Select Payment Method:</label>
                          <% if (address && address.length) { %>
                          <div class="d-flex justify-content-between">
                              <button type="button" class="btn btn-dark" id="cod-button">CASH ON DELIVERY</button>
                              <button class="btn btn-primary" type="button" id="rzp-button" value="submit">
                                  Pay with Razorypay
                              </button>
                              <button class="btn btn-success" style="display: none" type="button" id="wlt-button"
                                  value="submit">Pay With Wallet</button>
                          </div>
                          <% } else { %> <p class="text-danger">Please Add an Address</p> <% } %>
                      </div>
                  </div>
              </div>
          </div>
      </div>
  </form>
</div>

<!-- Include Bootstrap JS and any other scripts if needed -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

  <!-- Checkout Area End -->

  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    let selectedAddressId = null;
    const wallet = document.getElementById("wallet");
    // const couponBtn = document.getElementById("couponBtn");
    // const rmCoupon = document.getElementById("rmCoupon");

    document.addEventListener("DOMContentLoaded", () => {
      const form = document.querySelector("form");
      const rzpBtn = document.getElementById("rzp-button");
      const codBtn = document.getElementById("cod-button");
      const wltBtn = document.getElementById("wlt-button");
      const addressRadios = document.querySelectorAll('input[name="addressId"]');
      // const isCoupon = document.getElementById("coupon_code");

      const firstRadio = document.querySelector('input[name="addressId"]:checked');
      if (firstRadio) {
        selectedAddressId = firstRadio.value;
      }

      addressRadios.forEach((radio) => {
        radio.addEventListener("change", (event) => {
          selectedAddressId = event.target.value;
        });
      });

      codBtn.addEventListener("click", handleCodButtonClick);
      rzpBtn.addEventListener("click", handleRzpButtonClick);
      wltBtn.addEventListener("click", handleWltButtonClick);
      // couponBtn.addEventListener("click", handleCouponBtnClick);
      // rmCoupon.addEventListener("click", handleRemoveCouponBtnClick);

      handleWalletPayment();

      // if (isCoupon.value) {
      //     codBtn.classList.add("disabled");
      //     handleCouponChange();
      // }

      // const couponElement = document.querySelector("#coupon_code");
      // handleCouponBtnClick("onLoad");
    });

    async function handleWltButtonClick(event) {
      event.preventDefault();
      if ((await checkCartData()) 
      // && (await checkCoupon())
    ) {
        const data = {
          addressId: selectedAddressId,
          payment_method: "wallet_payment",
          isWallet: wallet.checked,
        };
        await placeOrder("/placeOrder", data);
      }
    }



    async function handleCodButtonClick(event) {
      event.preventDefault();
      if (await checkCartData()) {
        console.log("handle cod  button clicked ")
        const data = {
          addressId: selectedAddressId,
          payment_method: "cash_on_delivery",
          isWallet: wallet.checked,
        };
        console.log("in handle cod button click ",data)
        await placeOrder("/placeOrder", data);
      }
    }

    async function handleRzpButtonClick() {
      if ((await checkCartData()) 
      // && (await checkCoupon())
    ) {
      console.log("in handle rzpy click ''''''''''''''''''''''''''''''''''")
        const data = {
          addressId: selectedAddressId,
          payment_method: "online_payment",
          isWallet: wallet.checked,
        };
        console.log("rzpy datra ===========================",data)
        await placeOrder("/placeOrder", data);
      }
    }

    async function placeOrder(url, data) {
      console.log("in place order function %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        console.log("place order function response \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",response)
        console.log("Response Status Text:", response.statusText);
console.log("Response Status Code:", response.status);
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        const responseData = await response.json();
        console.log("responseData in place order -----------------------------",responseData)
        if (data.payment_method === "cash_on_delivery") {
          console.log("Processing cash_on_delivery order...");
          handleCodPayment(responseData);
        } else if (data.payment_method === "online_payment") {
          handleRzpPayment(responseData);
        } else if (data.payment_method === "wallet_payment") {
          handleWltPayment(responseData);
        }

      } catch (error) {
        handleError(error);
      }
    }

    async function checkCartData() {
      try {
        const originalCartData = JSON.parse(document.getElementById("originalCartData").value);
        console.log("in check cart data  =====================",originalCartData)
        const response = await fetch("/checkout/get");
console.log("in check crat data ||||||||||||||||||||||||||||||||||||||||||||||||||| ",response)
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }

        const currentCartData = await response.json();

        if (currentCartData !== null && compareJSONStrings(originalCartData, currentCartData)) {
          
          showCartConfirmation();
          return false;
        }

        return true;
      } catch (error) {
        handleError(error);
      }
    }

    // async function checkCoupon() {
    //     const code = document.getElementById("coupon_code");
    //     if (code.value) {
    //         try {
    //             const response = await fetch("/checkout/coupon/", {
    //                 method: "POST",
    //                 body: JSON.stringify({ code: code.value }),
    //                 headers: {
    //                     "Content-Type": "application/json",
    //                 },
    //             });

    //             if (response.ok) {
    //                 const data = await response.json();
    //                 if (data.status === "success") {
    //                     return true;
    //                 } else if (data.status === "danger") {
    //                     showCouponAlert(data);
    //                 }
    //             }
    //         } catch (error) {
    //             console.error("Fetch error:", error);
    //             handleError(error);
    //         }
    //     } else {
    //         return true;
    //     }
    // }

    function compareJSONStrings(jsonString1, jsonString2) {
      return JSON.stringify(jsonString1) !== JSON.stringify(jsonString2);
    }

    function showCartConfirmation() {
      Swal.fire({
        title: "Cart Confirmation",
        text: "Your cart has changed. Do you want to reload the page?",
        icon: "info",
        showCancelButton: true,
        confirmButtonText: "Reload",
        cancelButtonText: "Close",
      }).then((result) => {
        if (result.isConfirmed) {
          proceedToCheckout();
        }
      });
    }

    // function showCouponAlert(data) {
    //     Swal.fire({
    //         title: "Coupon Alert",
    //         text: data.message,
    //         icon: "info",
    //         showCancelButton: true,
    //         confirmButtonText: "Remove Coupon",
    //         cancelButtonText: "Close",
    //     }).then((result) => {
    //         if (result.isConfirmed) {
    //             handleRemoveCouponBtnClick();
    //         }
    //     });
    // }

    // async function handleCouponChange() {
    //     const code = document.getElementById("code");
    //     const coupon = document.getElementById("coupnSection");
    //     const total = document.getElementById("total");

    //     try {
    //         fetch("/checkout/coupon/", {
    //             method: "POST",
    //             body: JSON.stringify({ code: code.textContent }),
    //             headers: {
    //                 "Content-Type": "application/json",
    //             },
    //         })
    //             .then((response) => {
    //                 if (response.ok) {
    //                     return response.json();
    //                 }
    //             })
    //             .then((data) => {
    //                 if (data.status === "danger") {
    //                     coupon.classList.add("text-danger");
    //                     coupon.style.textDecoration = "line-through";
    //                 }
    //             })
    //             .catch((error) => {
    //                 console.error("Fetch error:", error);
    //             });
    //     } catch (error) {}
    // }

    function proceedToCheckout() {
      window.location.reload();
    }

    function handleCodPayment(responseData) {
      console.log("in code payment [[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]",responseData.orderId)
      window.location.href = `/orderPlaced/${responseData.orderId}`;
    }

    function handleWltPayment(responseData) {
      window.location.href = `/orderPlaced/${responseData.orderId}`;
      
    }

    function handleRzpPayment(responseData) {
      console.log("in rzp payment [[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]",responseData.orderId)
      const options = {
        key: "rzp_test_ja5cCGGNXq1Wn7",
        amount: responseData.order.totalPrice * 100,
        currency: "INR",
        name: "SHOEVERSE",
        description: "Test Transaction",
        image: "https://example.com/your_logo.png",
        order_id: responseData.order.id,
        handler: function(response) {
          handleSuccessPayment(response, responseData);
        },
        prefill: {
          name: responseData.user.firstName,
          email: responseData.user.email,
          contact: responseData.user.mobile,
        },
        notes: {
          address: "Razorpay Corporate Office",
        },
        theme: {
          color: "#000000",
        },
        modal: {
          ondismiss: function() {
            handlePaymentFailure(responseData.orderId);
          },
        },
      };
      console.log("option in rzp payment ((((((((((((((((((((((()))))))))))))))))))))))",options)

      const rzp1 = new Razorpay(options);

      rzp1.on("payment.failed", function(response) {
        handlePaymentFailure(responseData.orderId);
      });

      rzp1.open();
    }

    function handleSuccessPayment(response, responseData) {
      const postData = {
        razorpay_payment_id: response.razorpay_payment_id,
        razorpay_order_id: response.razorpay_order_id,
        razorpay_signature: response.razorpay_signature,
        orderId: responseData.orderId,
        userId: responseData.user._id,
        walletAmount: response.walletamount,
      };

      fetch(`/verifyPayment`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(postData),
        })
        .then((response) => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error("Error fetching data");
          }
        })
        .then((data) => {
          window.location.href = `/orderPlaced/${data.orderId}`;
        })
        .catch((error) => {
          handleError(error);
        });
    }

    async function handlePaymentFailure(orderId) {
      try {
        const cancelOrderUrl = `/orders/${orderId}`;
        const requestOptions = {
          method: "PUT",
        };
        const response = await fetch(cancelOrderUrl, requestOptions);
        console.log("response in handle payment failure ///////////////////////////////",response)

        if (response.ok) {
          console.log("Order cancellation request succeeded.");
          return response.json();
        } else {
          console.error("Order cancellation request failed.");
        }
      } catch (error) {
        handleError(error);
      }
    }

    function handleError(error) {
      console.error("Error:", error);
    }

    function handleWalletPayment() {
      wallet.removeEventListener("change", handlePaymentChange);
      wallet.addEventListener("change", handlePaymentChange);
      // handleCouponBtnClick("onUpdate");
    }

    function handlePaymentChange() {
      const totalAmount = document.getElementById("total");
      const walletAmount = document.getElementById("wallet-amount");
      const availableBalance = document.getElementById("available-balance");
      const codBtn = document.getElementById("cod-button");
      const wltBtn = document.getElementById("wlt-button");
      const rzpBtn = document.getElementById("rzp-button");
      const payWithWallet = this.checked ? true : false;
      const code = document.getElementById("coupon_code");

      if (payWithWallet) {
        codBtn.classList.add("disabled");
      } else {
        codBtn.classList.remove("disabled");
      }

      fetch("/update", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            payWithWallet,
            code: code.value
          }),
        })
        .then((response) => response.json())
        .then((data) => {
          totalAmount.innerText = data.total.toFixed(2);
          walletAmount.innerText = data.usedFromWallet.toFixed(2);
          availableBalance.innerText = data.walletBalance.toFixed(2);
          if (data.total === 0) {
            wltBtn.style.display = "grid";
            rzpBtn.style.display = "none";
          } else {
            wltBtn.style.display = "none";
            rzpBtn.style.display = "grid";
          }
        })
        .catch((error) => {
          console.error("Error updating checkout page:", error);
        });
    }

    // function handleCouponBtnClick(data) {
    //     const couponCode = document.getElementById("coupon_code");
    //     const sanitizedValue = couponCode.value.replace(/[^A-Z0-9]/g, "").toUpperCase();
    //     const couponError = document.getElementById("couponError");
    //     const total = document.getElementById("total");
    //     const discount = document.getElementById("discount");
    //     const rzpBtn = document.getElementById("rzp-button");
    //     const codBtn = document.getElementById("cod-button");
    //     const wltBtn = document.getElementById("wlt-button");

    //     fetch("/checkout/coupon/", {
    //         method: "POST",
    //         body: JSON.stringify({ code: sanitizedValue, data }),
    //         headers: {
    //             "Content-Type": "application/json",
    //         },
    //     })
    //         .then((response) => {
    //             if (response.ok) {
    //                 return response.json();
    //             }
    //         })
    //         .then((data) => {
    //             if (data.status === "danger") {
    //                 couponError.classList.remove("text-success");
    //                 couponError.classList.add("text-danger");
    //                 couponError.textContent = data.message;
    //                 discount.textContent = 0;
    //                 rzpBtn.classList.add("disabled");
    //                 rzpBtn.style.textDecoration = "line-through";
    //                 codBtn.classList.add("disabled");
    //                 codBtn.style.textDecoration = "line-through";
    //                 wltBtn.classList.add("disabled");
    //                 wltBtn.style.textDecoration = "line-through";

    //                 // couponList.classList.remove("d-block");
    //                 // couponList.classList.add("d-none");
    //                 // checkoutBtn.disabled = true;
    //                 // checkoutBtn.style.textDecoration = "line-through";
    //             } else if (data.status === "success") {
    //                 couponError.textContent = data.message + " " + data.coupon.description;
    //                 couponError.classList.remove("text-danger");
    //                 couponError.classList.add("text-success");
    //                 total.textContent = data.total;
    //                 discount.textContent = data.discount;
    //             }
    //         })
    //         .catch((error) => {
    //             console.error("Fetch error:", error);
    //         });
    // }

    // function handleRemoveCouponBtnClick() {
    //     fetch("/checkout/coupon/remove", {
    //         method: "GET",
    //     }).then((response) => {
    //         if (response.ok) {
    //             window.location.reload();
    //         }
    //     });
    // }
  </script>
</div>



// <script>
//   // Get a reference to the form
//   const addressForm = document.getElementById("addressForm");

//   addressForm.addEventListener("submit", (event) => {
//     event.preventDefault(); // Prevent the default form submission

//     const formData = new FormData(addressForm);

//     // Create an empty object to store the form data
//     const formDataObject = {};

//     // Iterate through the FormData and populate the object
//     formData.forEach((value, key) => {
//       formDataObject[key] = value;
//     });

//     // Convert the object to a JSON string
//     const jsonData = JSON.stringify(formDataObject);

//     const fetchOptions = {
//       method: "POST",
//       body: jsonData, // Send the JSON data
//       headers: {
//         "Content-Type": "application/json",
//       },
//     };

//     fetch("/user/address/add", fetchOptions)
//       .then((response) => {
//         if (response.ok) {
//           console.log("Address added successfully");
//           return response.json();
//         } else {
//           console.error("Error adding address");
//         }
//       })
//       .then((data) => {
//         if (data.status === "ok") {
//           window.location.reload();
//         }
//       })
//       .catch((error) => {
//         console.error("Network error:", error);
//       });
//   });
// </script>